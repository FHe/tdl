#!/usr/bin/python
#
# test the MotorPanel

import sys
import os
import time

import wx

import larch
import MPlot
import numpy

BANNER = """
==================================================
                                        Welcome to Larch
           
  Larch version %s    using python %s  and numpy %s
  Copyright M. Newville, T. Trainor (2010)
==================================================
 """  % (larch.__version__, "%i.%i.%i" % (sys.version_info[:3]), numpy.__version__)


class LarchWxShell(object):
    ps1 = 'Larch>'
    ps2 = '.....>'
    def __init__(self, writer=None, prompt=None, output=None, input=None):
        self.larch  = larch.Interpreter()
        self.input  = larch.InputText(prompt=self.ps1)
        self.prompt = prompt
        self.output = output
        self.larch.writer = self

    def help(self, topic):
        print  'help ', topic
        
    def SetPrompt(self, partial=False):
        if self.prompt is not None:
            p = self.ps1
            if partial:  p = self.ps2
            self.prompt.SetLabel(p)

    def write(self,text):
        if self.output is not None:
            self.output.WriteText(text)
            self.output.SetInsertionPointEnd()
            
    def execute(self, text):
        if  text.startswith('help'):
            arg = text[4:]
            if arg.startswith('(') and arg.endswith(')'): arg = arg[1:-1]
            if arg.startswith("'") and arg.endswith("'"): arg = arg[1:-1]
            if arg.startswith('"') and arg.endswith('"'): arg = arg[1:-1]
            text  = "help(%s)"% (repr(arg))
        if text.startswith('!'):
            os.system(text[1:])
        else:
            ret = None
            self.input.put(text,lineno=0)
            
            self.SetPrompt(partial = True)
            while len(self.input) >0:
                block, fname, lineno = self.input.get()
                ret = self.larch.eval(block,
                                      fname=fname, lineno=lineno)
                if hasattr(ret, '__call__') and not isinstance(ret,type):
                    try:
                        if 1 == len(block.split()):
                            ret = ret()
                    except:
                        pass
                if self.larch.error:
                    err = self.larch.error.pop(0)
                    fname, lineno = err.fname, err.lineno
                    self.write("%s:\n%s\n" % err.get_error())
                    for err in self.larch.error:
                        if ((err.fname != fname or err.lineno != lineno)
                            and err.lineno > 0 and lineno > 0):
                            self.write("%s\n" % (err.get_error()[1]))

                elif ret is not None:
                    self.write("%s\n" % ret)
                self.SetPrompt()
        
class MainFrame(wx.Frame):
    def __init__(self,  parent=None, **kwds):
        self.larch = LarchWxShell()
        self.BuildFrame(parent=parent, **kwds)
        self.larch.prompt = self.prompt
        self.larch.output    = self.output       

    def BuildFrame(self, parent=None, **kwds):
        wx.Frame.__init__(self, parent, -1, size=(600,400), style= wx.DEFAULT_FRAME_STYLE)
        

        self.SetFont(wx.Font(12, wx.SWISS, wx.NORMAL, wx.BOLD, False))
        sbar = self.CreateStatusBar(2, wx.CAPTION|wx.THICK_FRAME)
        self.SetStatusWidths([-2,-1])
        self.SetStatusText("Larch initializing...", 0)

        self.BuildMenus()

        bot_panel = wx.Panel(self, -1)
        prompt = wx.StaticText(bot_panel, -1, 'Larch>',    size = (65,-1),
                               style = wx.ALIGN_CENTER|wx.ALIGN_RIGHT|wx.EXPAND)

        input = wx.TextCtrl(bot_panel, -1,  '', size=(500,-1), 
                            style=wx.ALIGN_LEFT|wx.TE_PROCESS_ENTER)
        
        input.Bind(wx.EVT_TEXT_ENTER, self.onText)
        
        bsizer = wx.BoxSizer(wx.HORIZONTAL)

        bsizer.Add(prompt, 0, wx.BOTTOM|wx.CENTER)
        bsizer.Add(input,      1, wx.ALIGN_LEFT|wx.ALIGN_CENTER|wx.EXPAND)

        bot_panel.SetSizer(bsizer)
        bsizer.Fit(bot_panel)        


        output = wx.TextCtrl(self, -1,  BANNER,
                             size=(500,200), style=wx.TE_MULTILINE|wx.TE_RICH|wx.TE_READONLY)
        output.SetBackgroundColour('#E9E9DA')
        output.SetInsertionPointEnd()
        output.SetFont(wx.Font(11, wx.SWISS, wx.NORMAL, wx.BOLD, False))
        
        mainsizer = wx.BoxSizer(wx.VERTICAL)
        mainsizer.Add(output,       1, wx.ALIGN_CENTER|wx.CENTER|wx.EXPAND)
        mainsizer.Add(bot_panel,  0, wx.ALIGN_LEFT|wx.ALIGN_BOTTOM|wx.EXPAND)
      
        self.SetAutoLayout(True)
        self.SetSizer(mainsizer)
        self.Fit()
        self.Refresh()

        self.input = input
        self.output = output
        self.prompt = prompt
        self.SetStatusText("Ready", 0)

    def BuildMenus(self):
        ID_ABOUT = wx.NewId()
        ID_CLOSE  = wx.NewId()
        ID_FREAD = wx.NewId()
        ID_FSAVE = wx.NewId()

        ID_PSETUP  = wx.NewId()
        ID_PREVIEW = wx.NewId()
        ID_PRINT = wx.NewId()

        fmenu = wx.Menu()
        fmenu.Append(ID_FREAD, "&Read", "Read Configuration File")
        fmenu.Append(ID_FSAVE, "&Save", "Save Configuration File")        
        fmenu.AppendSeparator()
        fmenu.Append(ID_PSETUP, 'Page Setup...', 'Printer Setup')
        fmenu.Append(ID_PREVIEW, 'Print Preview...', 'Print Preview')
        fmenu.Append(ID_PRINT, "&Print\tCtrl+P", "Print Plot")
        fmenu.AppendSeparator()
        fmenu.Append(ID_CLOSE, "E&xit", "Terminate the program")

        hmenu = wx.Menu()
        hmenu.Append(ID_ABOUT, "&About",
                     "More information about this program")
        
        menuBar = wx.MenuBar()
        menuBar.Append(fmenu, "&File");
        menuBar.Append(hmenu, "&Help");
        self.SetMenuBar(menuBar)

        self.Bind(wx.EVT_MENU,  self.onAbout, id=ID_ABOUT)
        self.Bind(wx.EVT_MENU,  self.onClose, id=ID_CLOSE)

    def onText(self, event=None):
        text =  event.GetString()
        self.larch.write(">%s\n" % text)
        self.larch.execute(text)
        self.input.Clear()

        event.Skip()
        
    def onAbout(self, event=None):
        about_msg =  """wxLarch 
        Matt Newville <newville@cars.uchicago.edu>"""
        dlg = wx.MessageDialog(self, about_msg,
                               "About wxLarch", wx.OK | wx.ICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()

    def onClose(self,event=None):
        try:
            self.Destroy()
        except:
            pass

if __name__ == '__main__':
    app = wx.PySimpleApp()
    f = MainFrame(None)
    f.Show()
    app.MainLoop()


