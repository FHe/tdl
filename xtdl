#!/usr/bin/env python
############################################################################
# T. Trainor
#
# -------------
# Modifications
# -------------
# 4-29-06 T2:
# - added some default _sys.vars
# 4-18-06 T2:
# - another small tweak to startup files.  may as well be .tdl_init
#   for all systems.
# 4-18-06 MN:
# - several tweaks to startup paths and files stuff.
# 4-16-06 T2:
# - A bunch of changes to handle setting default paths and default
#   startup files
# - also a bit of work on startup switches
# 4-8-06 T2
# Added verbose option.  note -f doesnt do anything, ie shell
# doesnt accept file on init.
#
############################################################################

import os, string, sys, getopt
#import ConfigParser

##############################################################
# test for command line switches
use_wxGUI = False
debug     = True
verbose   = True
do_shell  = True

libs      = []
files     = []

opts, args = getopt.getopt(sys.argv[1:], "wdvhxl:")
#print opts
#print args
for o, a in opts:
    if o == '-w':
        use_wxGUI = True
    elif o == '-d':
        debug = True
    elif o == '-v':
        verbose = True
    elif o == '-x':
        do_shell = False
    elif o == '-l':
        libs.append(a)
    elif o == '-h':
        print 'Startup options for tdl:'
        print '-h:  help'
        print '-w:  use wx GUI'
        print '-d: debug on'
        print '-l: load library'
        print '-v: verbose'
        print '-x: non-interactive execution'
        print 'Examples (combine the various options):'
        print '>tdl -v                  #verbose startup'
        print '>tdl -vd                 #verbose startup and debug on'
        print '>tdl -w                  #use wx GUI'
        print '>tdl -v  fname1 fname2   #verbose and execute files'
        print '>tdl fname1 fname2       #defaults and execute files'
        print '>tdl -l Lib1 -l Lib2     # load libraries at startup'
        sys.exit()

#################################################################
# import and set default paths
# additional paths should be set in the startup.tdl files
try:
    import xlib as tdl
    print '  ############## This is TDL EXPERIMENTAL ##############'
except ImportError:
    print 'could not load '
    # import tdl

lib_path    = os.path.abspath(tdl.__path__[0])
tdl_root    = os.path.dirname(lib_path)
module_path = os.path.join(tdl_root,'modules')
verbose=False

try:
    if verbose:
        print ' == tdl paths:'
        print '    tdl_root   = %s  ' % tdl_root
        print '    module_path = %s  ' % module_path
    tdl.Util.set_path(lib_path,verbose=verbose)
    tdl.Util.set_path(module_path,recurse=True,verbose=verbose)
    tdl.Util.set_path('.',verbose=verbose)
except:
    print "Error setting paths"
    pass

##############################################################
# startup  files:
#   first site-wide ==> module_path/startup.tdl
#   then from user's home dir ==> ~/.tdl_init
# files contains tuples of (file, Warn_if_Not_Exist_Flag)
files = [(os.path.join(module_path,'xstartup.tdl'),False)]
user_home = os.path.expanduser('~')
files.append((os.path.join(user_home,'.tdl_init'),False))

# create a dictionary of default _sys variables
sys_vars = {}
sys_vars['_sys.home'] = user_home
if os.getenv("work"):
    sys_vars['_sys.work'] = os.getenv("work")
elif os.getenv("WORK"):
    sys_vars['_sys.work'] = os.getenv("WORK")
else:
    sys_vars['_sys.work'] = os.getcwd()
#sys_vars['_sys.file_path'] = ''

# the rest of the arg line are added files
if args is not None:
    for f in args: files.append((f,True))

if verbose:
    print " == Command line Libraries:"
    for l in libs: print l
    print " == Startup files:"
    for f in files: print f

# run it
if use_wxGUI == False:
    t = tdl.shell(libs=libs,debug=debug,GUI='TkAgg')
    for var in sys_vars.keys():
        t.tdl.setVariable(var,sys_vars[var])
    for f,warn in files:
        if os.path.exists(f) and os.path.isfile(f):
            t.tdl_execute("load('%s')" % f)
        elif warn:
            print "\n  ***Cannot find tdl file: %s" % f
    if do_shell: t.cmdloop()
elif use_wxGUI == True:
    # tdl gets started from within the wxGUI
    # looks like dir gets reset when call application
    work_dir = os.getcwd()
    from wxGUI import wxGUI
    wxGUI.tdl      = tdl
    wxGUI.libs     = libs
    wxGUI.intro    = None
    wxGUI.debug    = debug
    wxGUI.files    = files
    wxGUI.sys_vars = sys_vars
    rsrc = os.path.join(module_path,'wxGUI','wxGUI.rsrc.py')
    # the wxGUI code handles creation of tdl...
    gui = wxGUI.model.Application(wxGUI.wxGUI, aFileName=rsrc)
    os.chdir(work_dir)
    gui.MainLoop()
