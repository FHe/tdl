Essentially every part of the system needs more testing.

- builtin help system needs work.

- exceptions: raise and try/except/finally, etc.
  run time exceptions seem to be working.  Areas that need work:
    . are syntax errors caught correctly?
    . error propagation (ie, full traceback) appears to be a 
      little different for errors in python mods v. tdl mods, 
      in that python mods include an error from the failing 
      point in tdlcompiler....
    . errors inside tdl procedures not fully diagnosed....

- should move loading of builtins and import_module from interpreter to symbolTable.

- may want a '.larch_config' file (or some equivalent) to set global runtime
  params.  This should be in the compiler init method..

- procedures (definition and execution): seems to be working, needs debugging.
   - Import / ImportFrom: this is working (for me), with both import and
      from-import both support importing either tdl modules OR python modules.

- SymbolTable: seems to be working....

- UNIT TESTING!! 

- conventions / documentation for "system settings" (what's the path for
  loading modules, etc) could be better... config dictionary??

- Functions as Commands:  appears OK, not currently test word1 as callable!


Testing: 
   started some unit testing, should do much more, probably with nose packaage

-- 
Other issues:
 - The initial loading of libraries (builtn, numpy, locally defined functions)
   should be re-implemented to use the builtin symbolTable.import_module(),
   and the list/code for what is imported on startup should be moved out of
   compiler.py and into its own file.


 - use PyReadline (from ipython) for windows
 - use h5py


Functions to add to builtins:
   ls, dir, cd, pwd, listdir
   more
   string functions (strfind, strsplit, etc...)
   read_ascii
   time:  timestamp, sleep, date

add hdf5 things
