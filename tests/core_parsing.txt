##
## core parsing tests

## regular math precedence
 1+2*3                   =>  1.0,  2.0,  3.0,  *,  +
 2*(4/3)                 =>  2.0,  4.0,  3.0,  /,  *
 2*4/3                   =>  2.0,  4.0,  *,  3.0,  /
 2*(4+3)                 =>  2.0,  4.0,  3.0,  +,  *
 2*4+3                   =>  2.0,  4.0,  *,  3.0,  +
 5/2+3                   =>  5.0,  2.0,  /,  3.0,  +
 5/2*3                   =>  5.0,  2.0,  /,  3.0,  *
 6/2/3                   =>  6.0,  2.0,  /,  3.0,  /
 2^3+3                   =>  2.0,  3.0,  ^,  3.0,  +
 2^(3+3)                 =>  2.0,  3.0,  3.0,  +,  ^
 2^(3*3)                 =>  2.0,  3.0,  3.0,  *,  ^
 3 * -2                  =>  3.0,  2.0,  @UN-,  *
 -3^2                    =>  3.0,  2.0,  ^,  @UN-
 2^3^2                   =>  2.0,  3.0,  2.0,  ^,  ^
 2^4 + 1                 =>  2.0,  4.0,  ^,  1.0,  +
 8*3^2 + 2               =>  8.0,  3.0,  2.0,  ^,  *,  2.0,  +
 -1**3                   =>  1.0,  3.0,  **,  @UN-

 0.2                     =>  0.2
 0.223e+4                =>  2230.0
 .32101e+3j              =>  321.01j

## with variables and array slices
 -pi/3                   =>  pi,  @VAR,  @UN-,  3.0,  /
 a[2]                    =>  2.0, a,  1, @ARR
 a[2] + 3                =>  2, a, 1,  @ARR,  3.0,  +
 b[2][5]                 =>  2.0, 5.0, b,  2, @ARR
 b[2,5]                  =>   2.0, 5.0, b,  2, @ARR
 c[2:3]                  =>   2.0,  3.0,  @SLI,  c, 1,  @ARR
 c[3:4:5]                =>  3.0,  4.0,  5.0,  @SL3,  c,  1, @ARR
 (a+x)[3:6][6]           =>  a, @VAR,  x,  @VAR,  +,  3.0,  6.0,  @SLI,  6.0,  2,  @SUB
 a[3:6][6:12]            =>  3.0,  6.0,  @SLI,  6.0,  12.0,  @SLI, a,  2, @ARR
 a[3:6,6:12]             =>  3.0,  6.0,  @SLI,  6.0,  12.0,  @SLI,  a,  2, @ARR
 (a[3:6])[6:12]          =>  3.0,  6.0,  @SLI,  a, 1, @ARR,  6.0,  12.0,  @SLI,  1,  @SUB


 e^(1j*pi) + 1           =>  e,  @VAR,  1j,  pi,  @VAR,  *,  ^,  1.0,  +

 -(a[3:5] + 2)           =>  3.0,  5.0,  @SLI, a, 1, @ARR,  2.0,  +,  @UN-
 -a[3:7] + 2.0           =>  3.0,  7.0,  @SLI,  a,  1, @ARR,  @UN-,  2.0,  +

  a[3+1]                 => 3, 1, +, a, 1, @ARR

## logic and more precedence tests
 x == 2                  =>  x,  @VAR,  2.0,  ==
 x == 3                  =>  x,  @VAR,  3.0,  ==
 x != 3                  =>  x,  @VAR,  3.0,  !=
 x >= 1                  =>  x,  @VAR,  1.0,  >=
 x >= 3                  =>  x,  @VAR,  3.0,  >=
 x >= 4                  =>  x,  @VAR,  4.0,  >=
 x < 99                  =>  x,  @VAR,  99.0,  <
 (x>u) or x*u>100        =>  x,  @VAR,  u,  @VAR,  >,  x,  @VAR,  u,  @VAR,  *,  100.0,  >,  or
 not yes                 =>  yes,  @VAR,  not
 not no                  =>  no,  @VAR,  not
 ! yes                   =>  yes,  @VAR,  not
 ! no                    =>  no,  @VAR,  not
 yes and no or nottrue   =>  yes,  @VAR,  no,  @VAR,  and,  nottrue,  @VAR,  or
 yes and (no or nottrue) =>  yes,  @VAR,  no,  @VAR,  nottrue,  @VAR,  or,  and
 (yes and no) or nottrue =>  yes,  @VAR,  no,  @VAR,  and,  nottrue,  @VAR,  or
 yes or no and nottrue   =>  yes,  @VAR,  no,  @VAR,  nottrue,  @VAR,  and,  or
 yes or (no and nottrue) =>  yes,  @VAR,  no,  @VAR,  nottrue,  @VAR,  and,  or
 (yes or no) and nottrue =>  yes,  @VAR,  no,  @VAR,  or,  nottrue,  @VAR,  and
 yes or not no           =>  yes,  @VAR,  no,  @VAR,  not,  or
 not (no or yes)         =>  no,  @VAR,  yes,  @VAR,  or,  not
 not no or yes           =>  no,  @VAR,  not,  yes,  @VAR,  or

 a[0] and a[1]           =>  0.0, a,  1, @ARR,  1.0, a, 1,  @ARR,  and
 not a[0]                =>  0.0, a,  1, @ARR, not
 not a[2]                =>  2.0, a,  1, @ARR, not

## function calls
 a(3,4)                  =>  3.0,  4.0,  a,  2, @FCN
 f2()                    =>  f2,  0,  @FCN
 fcn(3,4,a=2)            =>  3.0,  4.0,  2.0,  a,  @ASN,  fcn,  3,  @FCN
 sqrt(33.2j / cos(88.0)) =>  33.2j,  88.0,  cos,  1, @FCN,  /,  sqrt,  1,  @FCN
 cos(0.1)                =>  0.1,  cos,  1,  @FCN
 sin(0.1)                =>  0.1,  sin,  1,  @FCN
 sin(pi/2 - tan(0.1))    =>  pi,  @VAR,  2.0,  /,  0.1,  tan,  1,  @FCN,  -,  sin,  1,  @FCN
 sin(a*pi/20)            =>  a,  @VAR,  pi,  @VAR,  *,  20.0,  /,  sin,  1, @FCN
 tan(0.2 + 1.0j)         =>  0.2,  1j,  +,  tan,  1,  @FCN
 xtal.y.n(22)            =>  22.0,  xtal.y.n,  1,  @FCN


 f1(2,8.0)               =>  2.0,  8.0,  f1,  2, @FCN
 f1(2,2*7,c=11.0)        =>  2.0,  2.0,  7.0,  *,  11.0,  c,  @ASN,  f1,  3,  @FCN
 f1(2,8.0,c=sin(0.3))    =>  2.0,  8.0,  0.3,  sin,  1,  @FCN,  c,  @ASN,  f1,  3,  @FCN

 f2(c=99)               =>  99.0,  c,  @ASN,  f2,  1,  @FCN

 max(a[3]*01,9,3)       =>  3.0, a,  1, @ARR, 1.0,  *,  9.0,  3.0,  max,  3,  @FCN
 f3(2.5,b)[3]           =>  2.5,  b,  @VAR,  3.0, f3,  2,  1, @AFN
 f3(2.5,b)[3][4]        =>  2.5,  b,  @VAR,  3.0,  4.0, f3,  2,  2,  @AFN


## strings
 'a simple string ' =>  'a simple string ',  @STR
 ' %s = %g '  % ['sqrt(22.3)',sqrt(22.3)] =>  ' %s = %g ', @STR, 'sqrt(22.3)', @STR, 22.3, sqrt, 1, @FCN, 2, @LIS, %

## dictionaries and lists

 [0,1,2,4,8,16,32]      =>  0.0,  1.0,  2.0,  4.0,  8.0,  16.0,  32.0,  7,  @LIS
 adict['b']             =>  'b',  @STR, adict,  1, @ARR
 adict['c'] /adict['b'] =>  'c',  @STR,  adict,  1, @ARR, 'b',  @STR, adict,  1, @ARR,  /


 [1,2,['a', 'b','c'], 4.0] =>  1.0,  2.0,  'a',  @STR,  'b',  @STR,  'c',  @STR,  3,  @LIS,  4.0,  4,  @LIS
 {'a':1, 'b':2.0, 'c':[1,2,3]} =>  1.0,  a,  @ASN,  2.0,  b,  @ASN,  1.0,  2.0,  3.0,  3,  @LIS,  c,  @ASN,  3,  @DIC


##