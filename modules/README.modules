The modules directory contains tdl addons.   

modules path:
-------------

When starting tdl from the main 'tdl' script the modules directory and ALL subdirectories are automatically added to the path.  Therefore, you do not need to use packaging syntax (unless you have modules in subdirectories and would like them to work in a normal python environment - in that case having the package syntax should not break tdl).


conventions:
-----------

The tdl convention is to put all the wrapper functions defining tdl commands into modules named:
   LibMyCommands.py
These may be placed anywhere under the modules path and can refer to other python modules.  To keep the directory structure clean - use an organized set of subdirectories to hold additional code (see path note above)


Additional 'script files' that define tdl functions for the module should be loaded from the LibXX.py


control:
-------
You can control what modules are loaded at startup by editing the 'startup.tdl' file.  This will control the default packages that are loaded for a site.  Additional personalization (for a mutliuser installation) can be achieved using the default startup file $HOME/.tdl_init and/or by passing startup scripts when the program is invoked.  

