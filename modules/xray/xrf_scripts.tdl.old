# Tdl defined procedures for med data

#########################################################
def xrf.plot(x,channel=False,hold=False,logplt=False):
    """
    plot a spectrum
    >>xrf.plot(x)
    """
    #print x
    dat  = xrf.counts(x)
    ndet = len(dat)
    nchan = len(dat[0])
    if channel==True:
        e = []
        for j in range(ndet,dtype='i'):
            e = append(e,[range(nchan,dtype='i')])
        endfor
    else:
        e = xrf.energy(x)
    endif

    first = True
    for j in range(ndet,dtype='i'):
        if sum(dat[j]) > 0:
            if first==True and hold==False:
                pylab.clf()
            else
                pylab.hold(True)
            endif
            if logplt:
                pylab.semilogy(e[j],dat[j])
            else:
                pylab.plot(e[j],dat[j])
            endif
            first = False
        else:
            print "Skipping detector %i, sum is zero" % (j)
        endif
    endfor

enddef

#########################################################
def xrf.plot_fit(x,channel=False,hold=False,logplt=False):
    """
    plot a fit spectrum
    >>xrf.plot(x)
    """
    #print x
    dat  = xrf.counts(x)
    calc = xrf.calc_peaks(x)
    ndet = len(dat)
    nchan = len(dat[0])
    if channel==True:
        e = []
        for j in range(ndet,dtype='i'):
            e = append(e,[range(nchan,dtype='i')])
        endfor
    else:
        e = xrf.energy(x)
    endif

    first = True
    for j in range(ndet,dtype='i'):
        if sum(dat[j]) > 0:
            if first==True and hold==False:
                pylab.clf()
            else
                pylab.hold(True)
            endif
            if logplt:
                pylab.semilogy(e[j],dat[j],'b.')
                pylab.hold(True)
                pylab.semilogy(e[j],calc[j],'r')
            else
                pylab.plot(e[j],dat[j],'b.')
                pylab.hold(True)
                pylab.plot(e[j],calc[j],'r')
            endif
            first = False
        else:
            print "Skipping detector %i, sum is zero" % (j)
        endif
    endfor

enddef

#########################################################
def xrf.plot_det(x,det=0,channel=False,hold=False,logplt=False):
    """
    plot a spectrum
    >>xrf.plot(x)
    """
    print x
    det = int(det)
    dat  = xrf.counts(x)[det]
    if sum(dat) ==  0:
        print "Data Sum is zero for det %d\n\n"  % det
        return('')
    endif
    nchan = len(dat)
    if channel==True:
        e = [range(nchan,dtype='i')]
    else:
        e = xrf.energy(x)[det]
    endif

    if hold==False:
        pylab.clf()
    else
        pylab.hold(True)
    endif
    if logplt:
        pylab.semilogy(e[j],dat[j])
    else:
        pylab.plot(e[j],dat[j])
    endif

enddef

#########################################################
def xrf.plot_fit_det(x,det=0,channel=False,hold=False,logplt=False):
    """
    plot a fit spectrum
    >>xrf.plot(x)
    """
    print x
    det = int(det)
    dat  = xrf.counts(x)[det]
    calc = xrf.calc_peaks(x)[det]
    nchan = len(dat)
    if channel==True:
        e = [range(nchan,dtype='i')]
    else:
        e = xrf.energy(x)[det]
    endif

    if hold==False:
        pylab.clf()
    else
        pylab.hold(True)
    endif
    if logplt:
        pylab.semilogy(e[j],dat[j],'b.')
        pylab.hold(True)
        pylab.semilogy(e[j],calc[j],'r')
    else
        pylab.plot(e[j],dat[j],'b.')
        pylab.hold(True)
        pylab.plot(e[j],calc[j],'r')
    endif

enddef

#########################################################

def xrf.plot_fit_components(x,det=0,channel=False,hold=False,logplt=False):
    """
    plot a fit spectrum
    >>xrf.plot(x)
    """
    print x
    det = int(det)
    dict = xrf.data_dict(x)
    dat = dict['counts'][det]
    nchan = len(dat)
    if channel==True:
        e = [range(nchan,dtype='i')]
    else:
        e = dict['energy']
    endif
    bgr = dict['background']
    peaks = dict['peaks'][det]
    if logplt:
        pylab.semilogy(e,dat,'b.')
    else:
        pylab.plot(e,dat,'b.')
    endif

    for key in dictkeys(peaks):
        y = peaks[key] + bgr
        if logplt:
            pylab.semilogy(e,y,'r')
        else:
            pylab.plot(e,y,'r')
        endif
    endfor

enddef

#########################################################







