=== Notes on wxGUI use. ===

 * The wxGUI stuff is run using wxPython and Python card.
   Both these packages need to be installed in the usual
   python site-packages directory for this to work.

 * The data used to render a window/set its properties are in
   the .rscr.py files. These define the various "components" that
   can then be hnadled in the wrapping class

 * Starting up the python card rescourceEditor and opening
   these files lets you sketch a window and add components,
   tags, values etc. using a wysiswyg (pretty nice)

 * Once launched the corresponding .py file handles events
   through a simple "on_component_event" syntax

=== Child windows ===

 * Currently I put the xrf child window in this directory to
   play around and learn how to deal. (use this is a template for others) 

 * It looks like the child window can get data from the parent with a
   call to self.getParent().XXX call.  So the child is responsible
   for getting all the data.

 * Im not sure about race conditions or blocking etc. - gotta learn
  more about the windows/process management - but so far this seems
  to work fine (eg the child can hold a pointer to tdl).   
 
=== Handling child windows: ===

 * Option 1:
     * it would be nice if the child windows could get initialized
       from the module code libraries.  For example at the end of a
       library we could have a list of "wxGUI_windows = [XXX,YYY]" 
 
    * if the wxGUI is being used as the shell then we can execute a
      bit of code to create the windows entries dynamically (and
      therefore the XXX.rsrc.py etc can reside with the module library).

    * if wxGUI is not the shell then this would be ignored...

 * Option 2 (better?): 
    * Drop all the python card wx files into the wxGUI directory
      (as is done now).  

    * Create a startup file for wxGUI has name matches between
      tld modules and the python card wxXXX.rscr.py and wxXXX.py

    * So at startup read the file, chomp through the list and
      dynamically create everything:

 {{{
   if tdl.module.isLoaded(xrf):
       execute code to create an xrf item in the windows menu
       and create the method "on_menuWindowXRF_select()"
   end
 }}} 
